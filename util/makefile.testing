MAINCC := $(wildcard *.cc)
TARGET := test_$(basename $(notdir ${MAINCC}))
TEST_FLAGS := -g -DGLIBCXX_FORCE_NEW=1 -std=c++11

ifneq ("$(wildcard testParams.mk)","")
include testParams.mk
endif

ifndef PARALLEL_TEST_RUN
PARALLEL_TEST_RUN := 0
endif

LINKSTEP :=
CU_O_TARGET := 
CUDA_OBJS := 
ifndef KERNELS
KERNELS :=
else
LINKSTEP := cudaDlink
CU_O_TARGET := obj/ks.dlink.o
CUDA_OBJS := $(addprefix obj/,$(addsuffix .o,$(basename ${KERNELS})))
endif

ifndef PARALLEL_PROCESSES
PARALLEL_PROCESSES := 1
endif

ifndef DOLATEXOUTPUT
DOLATEXOUTPUT := 0
endif

ifeq (${DOLATEXOUTPUT}, 1)
DOLATEXOUTPUTTARGET := latex
else
DOLATEXOUTPUTTARGET :=
endif

ifndef GPROF_ENABLE
GPROF_ENABLE := 0
endif
ifeq (${GPROF_ENABLE}, 1)
GPROF_FLAG := -pg
else
GPROF_FLAG :=
endif

ifndef DIM
DIM := 2
endif

ifeq (${PARALLEL_TEST_RUN}, 1)
MPIRUN := $(shell which mpirun) -np ${PARALLEL_PROCESSES}
VALG :=
else
MPIRUN := 
endif
ifeq (${PARALLEL_PROCESSES}, 1)
MPIRUN := 
endif

COMPFLAGS := ${GPROF_FLAG}

main: setup ${CUDA_OBJS} ${LINKSTEP}
	${CC_HOST} ${TEST_FLAGS} ${COMPFLAGS} ${CURRENT_ICONFIG} -I. -c ${MAINCC} -o obj/main.o
	${CC_HOST} ${TEST_FLAGS} ${COMPFLAGS} ${CURRENT_ICONFIG} obj/*.o -o ${TARGET} ${CURRENT_LCONFIG}

cudaDlink:
	${CC_DEVICE} ${DEVICE_DLINK_FLAGS} ${COMPILE_TIME_OPT} ${CUDA_OBJS} -o ${CU_O_TARGET} -lcudadevrt

${CUDA_OBJS}: obj/%.o: %.cu
	${CC_DEVICE} ${DEVICE_FLAGS} ${COMPILE_TIME_OPT} ${CURRENT_ICONFIG} -I. ${IFLAGS_DEPENDENCIES} $< -o $@

setup:
	echo ${CUDA_OBJS}
	rm -rf ./output ./obj
	mkdir -p output obj
	ln -sf ${CURRENT_BASEIDIR}/util/makefile.latex output/makefile

clean:
	-rm ${TARGET}

.PHONY: test
test: clean main ${DOLATEXOUTPUTTARGET}
	${VALG} ${MPIRUN} ./${TARGET}

latex:
	${MAKE} -C output -f makefile
